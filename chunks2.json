[
    {
        "chunk_id": "chunk_1",
        "text": "Hey there. How's it going everybody? In this video, we're going to be learning how to add and remove columns from our data frames. We'll also take a look at how we can combine information from multiple columns into 1. Now in my last video on updating rows and columns, that one was pretty long, but this one should be a lot shorter. Now I'd like to mention that we do have a sponsor Brilliant for sponsoring this series, and it would be great if you all could check them out using the link in the description section below and support the sponsors. And I'll talk more about their services in just a bit. So with that said, let's go ahead and get started. Now like I said, in the last video, we saw how to update information within our rows and columns. Now we're going to see how we can add and remove rows and columns. First, let's look at adding columns. Now adding columns is going to be pretty easy for us because it's basically the same thing that we did when we were updating values. We can simply create a column and pass in a series of values that we want that column to have. So I currently have my snippets file open here that we've seen in previous videos, so that we can see what this looks like on a smaller dataset. And as usual, if you wanna follow along, then I'll have links to the code and the notebooks and the data that I'm using, in the series in the description section below. So for example, let's say that we wanted to combine our first name and last name column into a single column and simply call that column first name. So first, in order",
        "start_time": 0.0,
        "end_time": 82.325
    },
    {
        "chunk_id": "chunk_2",
        "text": "code and the notebooks and the data that I'm using, in the series in the description section below. So for example, let's say that we wanted to combine our first name and last name column into a single column and simply call that column first name. So first, in order to get a series of the first name and last name combined, we could simply say when I come down here to the bottom, We can simply grab that first column, and then we can just add these together. And I'm putting a space between there. And then I will add in the last name. And if I run this whoops. And I missed my second plus symbol there. Now if I run this, then we can see that we get the first name and then a space, that's what this section is doing here, and then the last name. So now that we have this series of values here, we can see that we have 3 values. In order to add these to a new column with these values, we can simply say, df and then the name of what we want our new column to do to be. I'm gonna call this full name. And then I'm just gonna copy this that gave us that series before and assign this full name column to that returned series. So if I run that and then we look at our data frame, then now we can see that our data frame here has this new column, that is the first and the last name combined. And again, I'm using strings here, but you could also create a new column using the apply method that we saw in the last video to have a new column for some mathematical analysis for",
        "start_time": 82.085,
        "end_time": 159.5
    },
    {
        "chunk_id": "chunk_3",
        "text": "frame here has this new column, that is the first and the last name combined. And again, I'm using strings here, but you could also create a new column using the apply method that we saw in the last video to have a new column for some mathematical analysis for another column in the data frame as well. Now I do want to point out that you can't use the dot notation when assigning a column like this. We have to use the brackets like we did here, in order to make these assignments. Because if you use dot notation, then Python is going to think you're trying to assign an attribute onto the dataframe object and not a column. Okay. So, that's how we'd add a column to our data frames. Now let's look at removing columns. So now that we have our full name column, let's say that we no longer need or want our first and last name columns. So to remove these, I can use the drop method on our dataframe. So it's as easy as just saying df dot drop. And now what do we want to drop? We want to drop columns, and the columns are gonna be equal to, and I'm going to pass in a list because we want to, delete multiple columns here. So I want to delete the 1st column and the last column. So if I run this, then we can see that it returns a data frame without those columns. And like we've seen before, this just gives us a view of what our data frame would look like, but it doesn't actually apply those changes. If we're happy with those changes, then we can set the in place argument to true so that it changes our data",
        "start_time": 159.18001,
        "end_time": 236.835
    },
    {
        "chunk_id": "chunk_4",
        "text": "those columns. And like we've seen before, this just gives us a view of what our data frame would look like, but it doesn't actually apply those changes. If we're happy with those changes, then we can set the in place argument to true so that it changes our data frame in place. So I can come over here and just say in place equal to true within our drop method. And if I run that, and then we look at our data frame, then now we can see that our data frame no longer has that first and last name column. Now if we wanted to reverse that process and split that full name column into 2 different columns, then that's a little more complicated, but still pretty simple. So we've seen the, string split method a few times in the series so far. So let's run that on our full name column and see what we get. So I'm going to say, df and access that full name column, and now I'm gonna use that string class on our series, and then we will do a split. And we'll just split this on a space. Now split, splits on spaces by default, but I just want to be explicit here. So if we run this, then the result of that split method is that we get the first name and the last name in a list. So the first name is the first value and the last name is the second value. Now if we want to assign these to, 2 different columns, then we need to expand this list so that they are actually in 2 different columns. So to do this in Pandas, we can use the expand argument. So let's see what this looks like.",
        "start_time": 236.595,
        "end_time": 318.31
    },
    {
        "chunk_id": "chunk_5",
        "text": "is the second value. Now if we want to assign these to, 2 different columns, then we need to expand this list so that they are actually in 2 different columns. So to do this in Pandas, we can use the expand argument. So let's see what this looks like. So this is within the split method here, and we can just pass in another argument and say expand is equal to true. So if I run this, then we can see that the results are pretty similar, but now everything that was in our list is split up into columns. So now we have 2 columns here of those split results. So now all we need to do is set 2 columns in our data frame to those 2 columns that were just returned. So we can say, I'm going to if we remember from earlier in the series, if we want to access multiple columns, then within the brackets, we can pass in a list. So we're gonna have 2 pairs of brackets here. The inner bracket is our list of columns. So I wanna add a 1st column and a last column, and we're gonna set that equal to this what we did here with the split method. So if I run this, then now our first and last column should have been assigned to these columns here. So let's take a look at our data frame and see if that worked. So we can see that now we added a first and a last column with the values that we returned up here. Okay. So that's how we would add and remove columns. So now let's look at adding and removing rows of data. So there are a couple of different ways that we might want",
        "start_time": 317.81,
        "end_time": 400.46002
    },
    {
        "chunk_id": "chunk_6",
        "text": "now we added a first and a last column with the values that we returned up here. Okay. So that's how we would add and remove columns. So now let's look at adding and removing rows of data. So there are a couple of different ways that we might want to add rows to our data frame. So first, we might just want to add a single row to our data frame of new data. And second, maybe we want to combine 2 data frames together into a single data frame by appending the rows of 1 to another. So first, let's look at adding, a single row of data. So we can do this with the append method. So if I want to add a single row, then I can just say df dot append, and now we can pass in our values here. So I'm just going to pass in a dictionary here and we'll pass in a first name of Tony. So if I run this, then we can see that we get an error. Now this is because this currently doesn't have an index. Now, it can sometimes be difficult to read these Pandas errors and figure out what the problem is, but in this case, it tells us exactly what to do. It says down here at the bottom, can only append a series if ignore index is equal to true or if the series has a name. So let's just ignore the index and our existing data frame will automatically, assign this new row, an index itself. So up here at the top, we can simply pass in an argument of ignore underscore index and set that equal to true. Now if I run this, then we can see that that worked. We're no",
        "start_time": 400.22,
        "end_time": 481.845
    },
    {
        "chunk_id": "chunk_7",
        "text": "our existing data frame will automatically, assign this new row, an index itself. So up here at the top, we can simply pass in an argument of ignore underscore index and set that equal to true. Now if I run this, then we can see that that worked. We're no longer getting an error. And also down here at the bottom, we can see that this new name was appended. Now we only assign this row a first name value. So we can see here that we assign that as Tony, and all of the other column values are set to n a n, which is not a number, which is used for missing values. So you can pass in an entire series or a list of information there in order to add a single row of data of any information that you want. Now if we have a data frame that we'd like to append to our existing data frame, then we can do that as well. So let me create a new data frame here from our existing values up here at the top. So I'm just gonna scroll up here, and I'm gonna grab our first dictionary here of the data that we originally created our Data Frame with. And I'm going to modify this a bit. So I'm going to just have this be two names here. So I'm gonna take out these 3rd values, and then we will go ahead and up these so update these. So for the first name, I'll do Tony and Steve. And for the last name, I'll do Stark and Rogers. And for the email addresses, let's see. I'll do ironmanat avenge.com, and for the second one, I'll do cap at avenge.com. So now I'm going to create a new",
        "start_time": 481.685,
        "end_time": 570.235
    },
    {
        "chunk_id": "chunk_8",
        "text": "these. So for the first name, I'll do Tony and Steve. And for the last name, I'll do Stark and Rogers. And for the email addresses, let's see. I'll do ironmanat avenge.com, and for the second one, I'll do cap at avenge.com. So now I'm going to create a new data frame here from this new dictionary. Now I'm going to call this df 2. So now I can just say pd dot data frame and pass in that people dictionary there, and now we should have a second data frame. Okay. So now let's say that we wanna add this to our existing data frame. So one way we can do this is to simply append, the one data frame to the other. Now these have conflicting indexes and they also have columns that are not in the same order. So again, we're going to want to ignore indexes when appending these so that they are assigned indexes properly. So I'm going to say df dot append and I'm going to pass in df 2 so that it appends it to our original data frame, and then I'm going to say ignore underscore index is equal to true. And if I run this here, then we can see down here at the bottom that it added these new rows. Now if you got a warning here, then the reason for this is because we didn't pass in, all of the columns in the same order when appending these. So it's given us a warning here, that there are different ways that it could have sorted the columns. So don't worry too much about that, but in the future version of Pandas, it's going to set the sort to false by default, and actually Pandas version 1 was just released",
        "start_time": 569.915,
        "end_time": 654.685
    },
    {
        "chunk_id": "chunk_9",
        "text": "it's given us a warning here, that there are different ways that it could have sorted the columns. So don't worry too much about that, but in the future version of Pandas, it's going to set the sort to false by default, and actually Pandas version 1 was just released as I was recording this series, so this may have already been done. But we can ignore this for now, but if we wanted to, then we could pass in the value of sort equal to false and get rid of this warning. So if I went back up here and I passed in sort is equal to false, and also when I run this, it's no longer going to sort these columns here. So if I run this, then we can see that we no longer get that warning, and now it's not, sorting the columns anymore. Now unlike the drop method, if we want to make these changes permanent, then we don't have an in place method to use. Instead, we'd have to just set the data frame to this returned data frame, by copying this, and then we can say df is equal to, and then just pass in that returned data frame there. So if I run that, then we look at our original data frame, then we can see that those rows were added on there. Now, I'll be honest, some of you might wanna ask in the comment section below why some of these have an in place argument and others don't. But honestly, I'm not really sure. I'm sure there's a reason, but I'd have to do some more digging around to find out exactly why. But this append method doesn't have an in place argument like the drop method has, so we",
        "start_time": 654.285,
        "end_time": 727.015
    },
    {
        "chunk_id": "chunk_10",
        "text": "have an in place argument and others don't. But honestly, I'm not really sure. I'm sure there's a reason, but I'd have to do some more digging around to find out exactly why. But this append method doesn't have an in place argument like the drop method has, so we have to do it this way. Okay. So lastly, let's look at removing rows. So let's say that you're an Ironman fan, and you want to remove Steve Rogers here from our data frame. Now, we can do that in almost the same way that we dropped our columns, but instead of specifying the columns that we want to drop, we can simply pass in the indexes that we want to drop. So I can come down here and say df.drop, and we can see here on the far left if you've watched my video on indexes, this has an index of 4. So let's just say we want to drop an index to of 4. So if I run this, then we could see that we still have Iron Man and Tony Stark here, but we no longer have Steve Rogers. So that 4th index was deleted. And, again, if you want to actually apply, that to the data frame, then you'll need to set the in place argument to true. Now, you might want to do something a little more complicated and drop rows using a conditional. Now, I'd probably do this using loc, like we saw in the previous video where we were learning about, filtering data from our data frame, but we can also do this using drop. So if I wanted to drop all of the rows where the last name is equal to Doe, so we have 2 of those values here, then I",
        "start_time": 726.775,
        "end_time": 802.41504
    },
    {
        "chunk_id": "chunk_11",
        "text": "the previous video where we were learning about, filtering data from our data frame, but we can also do this using drop. So if I wanted to drop all of the rows where the last name is equal to Doe, so we have 2 of those values here, then I can pass in the indexes of that filter. So let me show you what this means and it won't be as complicated. So I can say df dot drop, and now I am going to say index is equal to, and now I am going to put in my conditional. So if you remember from the filtering video, we can actually pass the conditional here inside of our brackets. So now I can say, okay, I want a conditional where the last name of that column, equals equals doe. Now the only difference here is that we have a conditional here, but we want the indexes since we're saying index is equal to. So just here at the end, I'm gonna use, this method and just say dot index. So if I run this, then we can see that it removed those values with the last name of Doe. Now like I said in that filtering video, I don't really like all of this being bunched up together because I think that it's hard to read, and you always want your code, to be easy to read by other developers. So I would pull the conditional out into its own variable, and instead, I would say something like this. I would say, filt for filter is equal to, and then I'll just grab our conditional here and cut that out and paste that here. And now we can say that we want our, filter applied to that data frame and",
        "start_time": 802.255,
        "end_time": 888.08496
    },
    {
        "chunk_id": "chunk_12",
        "text": "variable, and instead, I would say something like this. I would say, filt for filter is equal to, and then I'll just grab our conditional here and cut that out and paste that here. And now we can say that we want our, filter applied to that data frame and then grab the index of that. So if I run this, then we can see that that gives us, the exact same result, but that's a little bit easier to read. Okay. So that's been an overview of adding and removing rows and columns from our data frames. Now before we end here, I'd like to mention the sponsor of this video, and that sponsor is Brilliant. So in this series, we've been learning about Pandas and how to analyze data in Python. And Brilliant would be an excellent way to supplement what you learn here with their hands on courses. They have some excellent courses and lessons that do a deep dive on how to think about and analyze data correctly. For data analysis fundamentals, I would really recommend checking out their statistics course, which shows you how to analyze graphs and determine significance in the data. And I would also recommend their machine learning course, which takes data analysis to a new level where you'll learn about the techniques being used that allow machines to make decisions where there's just too many variables for a human to consider. So to support my channel and learn more about Brilliant, you can go to brilliant.org forward slash c m s to sign up for free. And also, the first 200 people that go to that link will get 20% off the annual premium subscription, and you can find that link in the description section below. Again, that's brilliant.orgforward/cms. Okay. So",
        "start_time": 887.925,
        "end_time": 963.77
    },
    {
        "chunk_id": "chunk_13",
        "text": "you can go to brilliant.org forward slash c m s to sign up for free. And also, the first 200 people that go to that link will get 20% off the annual premium subscription, and you can find that link in the description section below. Again, that's brilliant.orgforward/cms. Okay. So I think that's gonna do it for this Pandas video. I hope you feel like you got a good idea for how to add and remove columns and rows from your data frame and feel comfortable doing that. In the next video, we will be learning about different ways to sort our data, but if anyone has questions about what we covered in this video, then feel free to ask in the comments section below, and I'll do my best to answer those. And if you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest way is to simply like the video and give it a thumbs up, and also it's a huge help to share these videos with anyone who you think would find them useful. And if you have the means, you can contribute through Patreon, and there's a link to that page in the description section below. Be sure to subscribe for future videos, and thank you all for watching.",
        "start_time": 963.61,
        "end_time": 1002.29
    }
]